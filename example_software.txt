~~~
{1. Define the robot motion model as finite transition system}{}
NAO_motion = MotionFts(node_dict, symbols, 'office')
~~~

~~~
{2. Define the robot action model}{}
NAO_action = ActionModel(action_dict)
~~~

~~~
{3. Construct full robot model}{}
NAO_model = MotActModel(NAO_motion, NAO_action)
~~~

~~~
{4. Define robot task as LTL formulas}{}
hard_spec = '([]<>pick) && ([](pick -> X(!pick U drop))) && ([](drop -> X(!drop U pick)))'
soft_spec = None
~~~

~~~
{5. Construct the planner}{}
NAO_planner = ltl_planner(NAO_model, hard_spec, soft_spec)
~~~

~~~
{6. Synthesize the static plan fulfilling the task}{}
NAO_planner.optimal(10, 'static')
~~~

~~~
{Output}{}
dijkstra_plan_networkX done within 0.01s: precost 711.00, sufcost 921.00 

the plan prefix:

[(400.0, 350.0), (400.0, 1050.0), (1200.0, 1050.0), 'pick', 
(400.0, 1050.0), (400.0, 1750.0), 'drop', (400.0, 1050.0), 
(1200.0, 1050.0), 'pick']

the plan suffix:

[(1200.0, 1050.0), (400.0, 1050.0), (400.0, 1750.0), 'drop', 
(400.0, 1050.0), (1200.0, 1050.0), 'pick', (400.0, 1050.0),
(400.0, 1750.0), 'drop', (400.0, 1050.0), (1200.0, 1050.0)]

full construction and synthesis done within 0.03s 
~~~
